name: Provision EKS and deploy Prometheus and Grafana

on:
  push:
    branches:
      - main
      - dev
    paths:
      - '**.values-*.yaml'

permissions:
  id-token: write
  contents: read

jobs:
  eks_prometheus_deployment:
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'main' && 'prod' || 'dev' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with: 
          terraform_version: latest

        # Set the working directory based on the branch/environment
      - name: Set Working Directory
        id : set-dir
        run: echo "WORKING_DIR=./environment/${{ github.ref_name == 'main' && 'prod' || 'dev' }}" >> $GITHUB_ENV

        # Authenticate using AWS Credentials
      - name: Configure AWS Credentials (Access Keys)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.TF_VAR_region }}
          
      - name: Verify identity
        run: aws sts get-caller-identity

      # Set Environment-Specific Variables (from GitHub Secrets or Environments)
      - name: Set Terraform Variables
        run: |
          echo 'TF_VAR_env=${{ vars.TF_VAR_env }}' >> $GITHUB_ENV
          echo 'TF_VAR_key=${{ vars.TF_VAR_key }}' >> $GITHUB_ENV
          echo 'TF_VAR_backend_bucket=${{ vars.TF_VAR_backend_bucket }}' >> $GITHUB_ENV
          echo 'TF_VAR_cidr_block=${{ vars.TF_VAR_cidr_block }}' >> $GITHUB_ENV
          echo 'TF_VAR_private_subnets_cidr=${{ vars.TF_VAR_private_subnets_cidr }}' >> $GITHUB_ENV
          echo 'TF_VAR_public_subnets_cidr=${{ vars.TF_VAR_public_subnets_cidr }}' >> $GITHUB_ENV
          echo 'TF_VAR_availability_zones=${{ vars.TF_VAR_availability_zones }}' >> $GITHUB_ENV
          echo 'TF_VAR_cluster_name=${{ vars.TF_VAR_cluster_name }}' >> $GITHUB_ENV
          echo 'TF_VAR_cluster_version=${{ vars.TF_VAR_cluster_version }}' >> $GITHUB_ENV
          echo 'TF_VAR_max_size=${{ vars.TF_VAR_max_size }}' >> $GITHUB_ENV
          echo 'TF_VAR_min_size=${{ vars.TF_VAR_min_size }}' >> $GITHUB_ENV
          echo 'TF_VAR_desired_size=${{ vars.TF_VAR_desired_size }}' >> $GITHUB_ENV
          echo 'TF_VAR_instance_types=${{ vars.TF_VAR_instance_types }}' >> $GITHUB_ENV
          echo 'TF_VAR_region=${{ vars.TF_VAR_region }}' >> $GITHUB_ENV

      # Run Terraform commands using the dynamic directory set above
      - name: Terraform Init
        run: terraform init
        working-directory: ${{env.WORKING_DIR}}

      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ env.WORKING_DIR }}

      - name: Terraform Plan
        run: terraform plan
        working-directory: ${{ env.WORKING_DIR }}

      - name: Terraform Apply
        if: github.ref_name == 'dev' || (github.ref_name == 'main' && github.event_name == 'push')
        run: terraform apply -auto-approve
        working-directory: ${{ env.WORKING_DIR }}
      
      # Run Terraform output commands to extract cluster name  
      - name: Extract Cluster name
        id: tf_output
        run: |
            echo "CLUSTER_NAME=$(terraform output -raw eks_cluster_name)" >> $GITHUB_ENV
        working-directory: ${{ env.WORKING_DIR }}
    
      # Install kubectl on the runner 
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: latest
      
      # Install Helm on the runner 
      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: latest
  
      - name: Update kube-config
        run: |
          aws eks update-kubeconfig --name "$CLUSTER_NAME" --region ${{ vars.TF_VAR_region }}
      
      - name: Helm Lint
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm lint prometheus-community/kube-prometheus-stack

      - name: Validate Prometheus Rules
        run: |
          wget https://github.com/prometheus/prometheus/releases/download/v2.52.0/prometheus-2.52.0.linux-amd64.tar.gz
          tar xvf prometheus-2.52.0.linux-amd64.tar.gz
          ./prometheus-2.52.0.linux-amd64/promtool check rules monitoring/alerts/custom-rules.yaml

      - name: Helm Dry Run
        run: |
          helm upgrade --install prometheus prometheus-community/kube-prometheus-stack \
            --namespace monitoring --create-namespace \
            -f monitoring/values-${{ github.ref_name }}.yaml \
            --dry-run --debug

      - name: Helm Deploy Prometheus Stack (Rollback on Failure)
        run: |
          set -e

          helm upgrade --install prometheus prometheus-community/kube-prometheus-stack \
            --namespace monitoring --create-namespace \
            -f monitoring/values-${{ github.ref_name }}.yaml \
            --wait --timeout 10m || FAILED=true

          if [ "$FAILED" = true ]; then
            echo "⚠️ Helm upgrade failed. Attempting rollback..."
            helm rollback prometheus --namespace monitoring || echo "⚠️ Rollback failed too. Manual intervention required."
            exit 1
          fi
      - name: Helm Release History
        run: |
          helm history prometheus --namespace monitoring

      - name: Smoke Test - Monitoring Pods
        run: |
          kubectl get pods -n monitoring
          kubectl get svc -n monitoring
