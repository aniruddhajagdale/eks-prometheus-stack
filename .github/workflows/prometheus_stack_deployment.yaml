name: Bootstrap Monitoring Stack

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select the environment'
        required: true
        type: choice
        options:
          - dev
          - prod

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy Prometheus Stack to EKS
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    env:
      CLUSTER_NAME: ${{ vars.EKS_CLUSTER_NAME }}
      REGION: ${{ vars.TF_VAR_REGION }}
      HELM_RELEASE: ${{ vars.HELM_RELEASE }}
      HELM_CHART: ${{ vars.HELM_CHART }}
      NAMESPACE: ${{ vars.MONITORING_NAMESPACE }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # - name: Configure AWS credentials via OIDC
    #   uses: aws-actions/configure-aws-credentials@v4
    #   with:
    #     role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
    #     aws-region: ${{ vars.TF_VAR_REGION }}

      # Authenticate using AWS Credentials
    - name: Configure AWS Credentials (Access Keys)
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.TF_VAR_region }}

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: latest

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: latest

    - name: Update kubeconfig for EKS
      run: |
        aws eks update-kubeconfig --name $CLUSTER_NAME --region $REGION

    - name: Add Helm repo and update
      run: |
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo update

    - name: Lint Helm chart values
      run: |
        helm lint monitoring/helm/kube-prometheus-stack

    - name: Create monitoring namespace
      run: kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -

    - name: Create Grafana admin secret
      run: |
        kubectl create secret generic grafana-admin-secret \
          --namespace monitoring \
          --from-literal=admin-user=${{ secrets.GRAFANA_ADMIN_USER }} \
          --from-literal=admin-password=${{ secrets.GRAFANA_ADMIN_PASSWORD }} \
          --dry-run=client -o yaml | kubectl apply -f -
    
      ##  Pre-deployment stage(Trivy) that focuses on security

    - name: Run Trivy config scan (Helm chart - Pre-deployment stage)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: config
        scan-ref: monitoring/helm/kube-prometheus-stack/${{ github.event.inputs.environment }}
        exit-code: 1
    
      ##  Pre-deployment stage(Promtool) that focuses on configuration

    - name: Run promtool validation (Pre-deployment stage)
      run: |
        find monitoring/helm/kube-prometheus-stack/${{ github.event.inputs.environment }}/ -name '*.yaml' -exec promtool check config {} \;

    - name: Add Helm repo
      run: |
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo update

    - name: Install/Upgrade kube-prometheus-stack with rollback
      id: helm_deploy
      run: |
        set -e
        if ! helm upgrade --install prometheus-stack prometheus-community/kube-prometheus-stack \
            --namespace monitoring \
            --values monitoring/helm/kube-prometheus-stack/${{ github.event.inputs.environment }}/values.yaml \
            --wait --timeout 10m; then
          echo "Helm upgrade failed, rolling back..."
          helm rollback prometheus-stack --namespace monitoring
          exit 1
        fi

    - name: Notify Slack on failure
      if: failure()
      run: |
        # read alerts/slack.yaml, get webhook & message
        # send slack notification
        # (or call a reusable action/script that does this)
        
    - name: Notify Email on failure
      if: failure()
      run: |
        # read alerts/email.yaml, get SMTP & message details
        # send email notification